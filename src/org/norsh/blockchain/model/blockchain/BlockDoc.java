package org.norsh.blockchain.model.blockchain;

import java.math.BigDecimal;
import java.util.List;

import org.norsh.blockchain.model.ADoc;

import lombok.Getter;
import lombok.Setter;

/**
 * Represents a block within the Norsh blockchain.
 * <p>
 * A block is a fundamental unit of the blockchain, containing metadata, transactions,
 * and cryptographic details necessary for ensuring integrity and consensus.
 * </p>
 *
 * <h2>Block Lifecycle:</h2>
 * The lifecycle of Norsh blocks follows a sequential mining process with the following rules:
 * <ul>
 *   <li>While {@code closed} is {@code false}, transactions can be added to the block.</li>
 *   <li>When {@code closed} is set to {@code true}, the block becomes available for mining,
 *       provided the previous block has been mined ({@code mined} is {@code true}).</li>
 *   <li>Once a miner successfully mines a block, they notify the Norsh system, which validates the
 *       solution, records the result, remunerates the miner with transaction fees, and marks the block
 *       as mined ({@code mined = true}).</li>
 *   <li>If there are blocks in the queue, the next block is released for mining with a minimum interval of 60 seconds.
 *       This interval is determined by the inclusion of the {@code previousBlockHash} in the current block,
 *       giving miners who were working on the previous block time to halt their processing and begin mining the new block.</li>
 * </ul>
 *
 * <h2>Nonce and Difficulty:</h2>
 * <p>
 * Mining a block involves generating a hash using the block data and one or more nonces. The hash must
 * satisfy the difficulty condition, which requires the hash to start with a specific number of zeros
 * (defined by the {@code difficulty} attribute).
 * </p>
 *
 * @license NCL-R
 * @author Danthur Lice
 * @since 01/2025
 * @version 1.0
 * @see <a href="https://docs.norsh.org">Norsh Documentation</a>
 */
@Getter
@Setter
public class BlockDoc extends ADoc {
    //@Indexed(unique = true)
    private Long number;

    /**
     * Identifier of the previous block.
     */
    private String previousId;
    
    /**
     * Creation timestamp of the block.
     */
    private Long timestamp;
    
    /**
     * Close timestamp of the block.
     */
    private Long closeTimestamp;

    /**
     * Hash of the Merkle Tree generated by the transactions.
     */
    private String merkleRoot;

    /**
     * Total miner transaction fees in NSH within the block.
     */
    private BigDecimal totalFee;

    /**
     * Position of the block in the blockchain.
     */
    private Long height;

    /**
     * Mining difficulty level, indicating the number of leading zeroes required in the hash.
     */
    private Integer difficulty;

    /**
     * List of transactions included in the block.
     */
    private List<BlockTransactionDoc> transactions;

    /**
     * Hash of the previous block in the blockchain.
     */
    private String previousBlockHash;

    /**
     * Mined hash of the current block.
     */
    private String blockHash;

    /**
     * List of nonces used in the mining process to generate a valid hash.
     */
    private List<Long> nonces;

    /**
     * Identifier of the miner who validated the block.
     */
    private String miner;

    /**
     * Public key of the miner.
     */
    private String publicKey;

    /**
     * Cryptographic signature of the block hash.
     */
    private String signature;

    /**
     * Timestamp of release to miner.
     */
    private Long miningReleaseTimestamp;
    
    /**
     * Timestamp of when the block was mined.
     */
    private Long miningEndTimestamp;

    /**
     * Version of the block structure.
     */
    private Integer version;

    /**
     * Indicates if the block has been mined.
     */
    private Boolean mined;

    /**
     * Indicates if the block is closed for new transactions.
     */
    private Boolean closed;
}
